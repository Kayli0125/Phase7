/**
 * Codasip s.r.o.
 *
 * CONFIDENTIAL
 *
 * Copyright 2022 Codasip s.r.o.
 *
 * All Rights Reserved.
 *
 * NOTICE: All information contained in this file, is and shall remain the property of
 * Codasip s.r.o. and its suppliers, if any.
 *
 * The intellectual and technical concepts contained herein are confidential and proprietary to
 * Codasip s.r.o. and are protected by trade secret and copyright law.  In addition, elements of the
 * technical concepts may be patent pending.
 *
 * This file is part of the Codasip Studio product. No part of the Studio product, including this
 * file, may be use, copied, modified, or distributed except in accordance with the terms contained
 * in Codasip license agreement under which you obtained this file.
 *
 *  \file   ca_pipe3_ex.codal
 *  \author Codasip
 *  \date   09.02.2022
 *  \brief  Execute stage - cycle accurate model
 */

#include "ca_defines.hcodal"
#include "debug.hcodal"

// -------------------------------------------------------------------------------------------------
// Execute Stage
// -------------------------------------------------------------------------------------------------
event ex : pipeline(pipe.EX)
{
    use ex_output;

    semantics
    {
        // Data Hazard forwarding controls MUXs
        if ((r_me_regwrite == WE_TRUE) && (r_me_rd == r_ex_src1) && (r_me_rd != 0)){
            s_ex_fwdA_sel = FWDA_ME_ALU;
        }
        else if ((r_wb_regwrite == WE_TRUE) && (r_wb_rd == r_ex_src1) && (r_wb_rd != 0)){
            s_ex_fwdA_sel = FWDA_WB_RD;
        }
        else{
            s_ex_fwdA_sel = FWDA_SRC;
        }

        if ((r_me_regwrite == WE_TRUE) && (r_me_rd == r_ex_src2) && (r_me_rd != 0)){
            s_ex_fwdB_sel = FWDB_ME_ALU;
        }
        else if ((r_wb_regwrite == WE_TRUE) && (r_wb_rd == r_ex_src2) && (r_wb_rd != 0)){
            s_ex_fwdB_sel = FWDB_WB_RD;
        }
        else{
            s_ex_fwdB_sel = FWDB_SRC;
        }

        switch(s_ex_fwdA_sel){
            case FWDA_SRC:
                s_ex_fwdA_src1 = r_ex_reg1;
                break;
            case FWDA_ME_ALU:
                s_ex_fwdA_src1 = r_me_alu;
                break;
            case FWDA_WB_RD:
                s_ex_fwdA_src1 = r_wb_alu;
                break;
            default:
                s_ex_fwdA_src1 = 0;
                break;
        }

        switch(s_ex_fwdB_sel){
            case FWDB_SRC:
                s_ex_fwdB_src2 = r_ex_reg2;
                break;
            case FWDB_ME_ALU:
                s_ex_fwdB_src2 = r_me_alu;
                break;
            case FWDB_WB_RD:
                s_ex_fwdB_src2 = r_wb_alu;
                break;
            default:
                s_ex_fwdB_src2 = 0;
                break;
        }

        // Multiplexor implementation
        switch (r_ex_alusrc2)
        {
            case ALU2_REG:
                s_ex_src2 = s_ex_fwdB_src2;
                break;
            case ALU2_IMM:
                s_ex_src2 = r_ex_immed;
                break;
            default:
                s_ex_src2 = 0;
                codasip_fatal(SRC2_ERROR, "Default case: %d\n", r_ex_alusrc2);
                break;
        }

        switch (r_ex_alusrc1)
        {
            case ALU_SRC1_REG:
                s_ex_src1 = s_ex_fwdA_src1;
                break;
            case ALU_SRC1_PC:
                s_ex_src1 = r_ex_pc;
                break;
            case ALU_SRC1_ZERO:
                s_ex_src1 = 0;
                break;
            default:
                s_ex_src1 = 0;
                codasip_fatal(SRC1_ERROR, "Default case: %d\n", r_ex_alusrc1);
                break;
        }

        // ALU logic operation
        switch (r_ex_aluop)
        {
            // Nop
            case ALU_NOP:
                s_ex_alu = 0;
                break;
            case ALU_ADD:
                s_ex_alu = s_ex_src1 + s_ex_src2;
                break;
            case ALU_SUB:
                s_ex_alu = s_ex_src1 - s_ex_src2;
                break;
            case ALU_SRL:
                s_ex_alu = s_ex_src1 >> (int5) s_ex_src2;
                break;
            case ALU_SRA:
                s_ex_alu = s_ex_src1 >> (int5) s_ex_src2;
                break;
            case ALU_SLTU:
                if (s_ex_src1 < s_ex_src2) s_ex_alu = 1;
                else s_ex_alu = 0;
                break;
            case ALU_SLT:
                if (((int32) s_ex_src1) < ((int32) s_ex_src2)) s_ex_alu = 1;
                else s_ex_alu = 0;
                break;
            case ALU_XOR:
                s_ex_alu = s_ex_src1 ^ s_ex_src2;
                break;
            case ALU_OR:
                s_ex_alu = s_ex_src1 | s_ex_src2;
                break;
            case ALU_AND:
                s_ex_alu = s_ex_src1 & s_ex_src2;
                break;
            default:
                s_ex_alu = 0;
                codasip_fatal(SRC2_ERROR, "Default case: %d\n", r_ex_aluop);  
                break;
        }

        // Add multiplexor branch address select
        switch (r_ex_brnch_sel)
        {
            case BRADD_ALU:
                s_ex_target_addr = s_ex_alu;
                break;
            case BRADD_ADDR:
                s_ex_target_addr = r_ex_pc + r_ex_immed;
                break;
            default:
                s_ex_target_addr = 0;
                break;
        }

        // Add generation of s_ex_zero signal
        if (s_ex_alu == 0) s_ex_zero = s_ex_alu;

        // HALT instruction detection
        if (r_ex_halt == HALT_HALT)
        {
            codasip_break();
            codasip_info(INFO_GENERAL, "Halt Instructions Indicated");
        }
    
        // Timing
        ex_output();
    };
};

event ex_output : pipeline(pipe.EX)
{
    semantics
    {
        r_me_pc = r_ex_pc;
        r_me_instr = r_ex_instr;
        r_me_alu = s_ex_alu;
        r_me_rd = r_ex_rd;
        r_me_regwrite = r_ex_regwrite;
        r_me_target_addr = s_ex_target_addr;
        r_me_brnchop = r_ex_brnchop;
        r_me_rfwt_sel = r_ex_rfwt_sel;
        r_me_zero = s_ex_zero;
    };
};
