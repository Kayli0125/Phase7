/**
 * Codasip s.r.o.
 *
 * CONFIDENTIAL
 *
 * Copyright 2022 Codasip s.r.o.
 *
 * All Rights Reserved.
 *
 * NOTICE: All information contained in this file, is and shall remain the property of
 * Codasip s.r.o. and its suppliers, if any.
 *
 * The intellectual and technical concepts contained herein are confidential and proprietary to
 * Codasip s.r.o. and are protected by trade secret and copyright law.  In addition, elements of the
 * technical concepts may be patent pending.
 *
 * This file is part of the Codasip Studio product. No part of the Studio product, including this
 * file, may be use, copied, modified, or distributed except in accordance with the terms contained
 * in Codasip license agreement under which you obtained this file.
 *
 *  \file   ca_pipe2_ex.codal
 *  \author Codasip
 *  \date   09.02.2022
 *  \brief  cycle accurate model
 */

#include "config.hcodal"
#include "ca_defines.hcodal"

// -------------------------------------------------------------------------------------------------
// Decode stage
// -------------------------------------------------------------------------------------------------

event id : pipeline(pipe.ID)
{
    use dec;
    use id_output;

    semantics
    {
        // Instruction memory data
        uint32 id_instr_temp;
        bool cache_ready, cache_response;

        if_code.transport(CP_PHS_DATA, cache_ready, cache_response, id_instr_temp);
        // Set local stall.
        s_id_stall = 0;

        s_id_instr = r_id_clear ? NOP_INSTRUCTION : id_instr_temp;


        // FUNC7 + FUNC3 + Opcode
        s_id_opc = s_id_instr[31..25] :: s_id_instr[14..12] :: s_id_instr[6..0];

        // First source register
        s_id_rs1 = s_id_instr[19..15];

        // Second source register
        s_id_rs2 = s_id_instr[24..20];

        // Destination register
        s_id_rd = s_id_instr[11..7];

        // Immediate decode
        s_id_immed = (int32)(int12)s_id_instr[31..20]; 
//    - I-type immediate

        s_id_immedb = (( int32 ) ( int12 ) ( s_id_instr [31..31]:: s_id_instr [7..7]:: s_id_instr [30..25]:: s_id_instr [11..8]) ) << 1;

        s_id_immedu = (( int32 ) ( int12 ) ( s_id_instr [31..31]:: s_id_instr [7..7]:: s_id_instr [30..25]:: s_id_instr [11..8]) );

        s_id_immedj = (( int32 ) ( int12 ) ( s_id_instr [31..31]:: s_id_instr [7..7]:: s_id_instr [30..25]:: s_id_instr [11..8]) ) << 1;

        s_id_immedr = (( int32 ) ( int12 ) ( s_id_instr [31..31]:: s_id_instr [7..7]:: s_id_instr [30..25]:: s_id_instr [11..8]) ) << 1;




        // Reading input registers
        s_id_reg1 = rf_xpr.src1[s_id_rs1];
        s_id_reg2 = rf_xpr.src2[s_id_rs2];

        // Register file forwarding Controls and MUXs
        if ((r_wb_rd == s_id_rs1) && (r_wb_regwrite) && (r_wb_rd != 0)){
            s_id_rff1_sel = RFF1_WB_DATA;
        }
        else{
            s_id_rff1_sel = RFF1_REG_SRC;
        }

        if ((r_wb_rd == s_id_rs2) && (r_wb_regwrite) && (r_wb_rd != 0)){
            s_id_rff2_sel = RFF2_WB_DATA;
        }
        else{
            s_id_rff2_sel = RFF2_REG_SRC;
        }

        switch(s_id_rff1_sel){
            case RFF1_REG_SRC:
                s_id_rffsrc1 = s_id_reg1;
                break;
            case RFF1_WB_DATA:
                s_id_rffsrc1 = r_wb_alu;
                break;
            default:
                s_id_rffsrc1 = 0;
                break;
        }

        switch(s_id_rff2_sel){
            case RFF2_REG_SRC:
                s_id_rffsrc2 = s_id_reg2;
                break;
            case RFF2_WB_DATA:
                s_id_rffsrc2 = r_wb_alu;
                break;
            default:
                s_id_rffsrc2= 0;
                break;
        }

        // Decoder activation
        dec(s_id_opc);

        // Update the registers
        id_output();
    };
};
event id_output : pipeline(pipe.ID)
{
    semantics
    {
        r_ex_pc = r_id_pc;
        r_ex_immed = s_id_immed;
        r_ex_rd = s_id_rd;
        r_ex_instr = s_id_instr;
        // r_ex_reg1 = s_id_reg1;
        // r_ex_reg2 = s_id_reg2;
        r_ex_aluop = s_id_aluop;
        r_ex_regwrite = s_id_regwrite;
        r_ex_alusrc2 = s_id_alusrc2;
        r_ex_halt = s_id_halt;

        r_ex_src1 = s_id_rs1;
        r_ex_src2 = s_id_rs2;
        r_ex_reg1 = s_id_rffsrc1;
        r_ex_reg2 = s_id_rffsrc2;
    };
};
